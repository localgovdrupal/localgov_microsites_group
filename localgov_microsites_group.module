<?php

/**
 * @file
 * Primary module hooks for LocalGov Microsites Group module.
 */

use Drupal\Component\Serialization\Yaml;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\group\Entity\GroupInterface;
use Drupal\localgov_microsites_group\Entity\MicrositeGroup;
use Drupal\localgov_microsites_group\Entity\MicrositeGroupInterface;
use Drupal\localgov_microsites_group\Form\DomainGroupAdd;
use Drupal\localgov_microsites_group\Form\DomainGroupContentAdd;
use Drupal\localgov_microsites_group\GroupExtraFieldDisplay;
use Drupal\localgov_microsites_group\RolesHelper;
use Drupal\views\Entity\View;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_modules_installed().
 */
function localgov_microsites_group_modules_installed($modules, $is_syncing) {
  // Assume configuration is correct if the site is being config sync'd.
  if ($is_syncing) {
    return;
  }

  foreach ($modules as $module) {
    RolesHelper::assignModuleRoles($module);
  }
  // Add our overrides to the group default views.
  if (in_array('group', $modules) || in_array('localgov_microsites_group', $modules)) {
    $module_path = \Drupal::service('extension.list.module')->getPath('localgov_microsites_group');
    if ($view = View::load('group_nodes')) {
      $group_node_view = Yaml::decode(file_get_contents($module_path . '/config/overrides/views.view.group_nodes.yml'));
      $displays = $view->get('display');
      $displays['microsite_page'] = $group_node_view['display']['microsite_page'];
      $displays['microsite_dashboard_embed'] = $group_node_view['display']['microsite_dashboard_embed'];
      $view->set('display', $displays);
      $view->save();
    }
    if ($view = View::load('group_members')) {
      $group_member_view = Yaml::decode(file_get_contents($module_path . '/config/overrides/views.view.group_members.yml'));
      $displays = $view->get('display');
      $displays['microsite_dashboard_embed'] = $group_member_view['display']['microsite_dashboard_embed'];
      $view->set('display', $displays);
      $view->save();
    }
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function localgov_microsites_group_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['group'])) {
    // @todo loop over and check if is a domain group.
    $bundles['group']['microsite']['class'] = MicrositeGroup::class;
    $bundles['group']['microsite']['label'] = 'Microsite';
  }
}

/**
 * Implements hook_theme().
 */
function localgov_microsites_group_theme($existing, $type, $theme, $path) {
  return [
    'microsites_task_block' => [
      'variables' => [
        'links' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function localgov_microsites_group_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['group']->setFormClass('new_domain', DomainGroupAdd::class);
  $entity_types['group_content']->setFormClass('new_domain', DomainGroupContentAdd::class);
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function localgov_microsites_group_menu_local_actions_alter(array &$local_actions) {
  if (!empty($local_actions['group_content.group_node_relate_page']) &&
    !in_array('view.group_nodes.microsites_page', $local_actions['group_content.group_node_relate_page']['appears_on'])
  ) {
    $local_actions['group_content.group_node_relate_page']['appears_on'][] = 'view.group_nodes.microsites_page';
  }
  if (!empty($local_actions['group_content.group_node_add_page']) &&
    !in_array('view.group_nodes.microsites_page', $local_actions['group_content.group_node_add_page']['appears_on'])
  ) {
    $local_actions['group_content.group_node_add_page']['appears_on'][] = 'view.group_nodes.microsites_page';
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function localgov_microsites_group_entity_extra_field_info() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(GroupExtraFieldDisplay::class)
    ->entityExtraFieldInfo();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function localgov_microsites_group_group_presave(GroupInterface $entity) {

  // Clear node cache so site design changes become visible.
  Cache::invalidateTags(['node_view']);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function localgov_microsites_group_view(array &$build, GroupInterface $group, EntityViewDisplayInterface $display, $view_mode) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(GroupExtraFieldDisplay::class)
    ->groupView($build, $group, $display, $view_mode);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function localgov_microsites_group_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'localgov_microsites_group_user_login_form_submit';
}

/**
 * Redirect for user login form.
 */
function localgov_microsites_group_user_login_form_submit($form, FormStateInterface $form_state) {
  // Don't redirect if a different redirect has been set, by something other
  // than the user.module standard.
  if ($redirect = $form_state->getRedirect()) {
    if ($redirect instanceof Url && $redirect->getRouteName() != 'entity.user.canonical') {
      return;
    }
  }

  $domain_negotiator = \Drupal::service('domain.negotiator');
  $active = $domain_negotiator->getActiveDomain();
  if (empty($active)) {
    return;
  }
  // If active is default, control, domain. Redirect to admin.
  if ($active->isDefault()) {
    $form_state->setRedirect('system.admin');
  }
  // Login to a domain group.
  $group_id = \Drupal::service('domain_group_resolver')->getActiveDomainGroupId();
  if ($group_id) {
    $form_state->setRedirect('entity.group.canonical', ['group' => $group_id]);
  }
}

/**
 * Implements hook_menu_locol_tasks_alter().
 */
function localgov_microsites_group_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if (($group = \Drupal::routeMatch()->getParameter('group')) &&
    $group instanceof MicrositeGroupInterface &&
    !empty($data['tabs'][0])
  ) {
    foreach ($data['tabs'][0] as $task_id => $link) {
      if ($custom_title = localgov_microsites_group_local_task_title($task_id)) {
        $data['tabs'][0][$task_id]['#link']['title'] = $custom_title;
        // Really just needs to be the bundle.
        // But should alreday be per group for user perms.
        $cacheability->addCacheableDependency($group);
      }

      if (localgov_microsites_group_local_task_hidden($task_id)) {
        $data['tabs'][0][$task_id]['#access'] = FALSE;
        $cacheability->addCacheableDependency($group);
      }
    }
  }
}

/**
 * Group local tasks to hide.
 */
function localgov_microsites_group_local_task_hidden($task_id) {
  return in_array($task_id,
    [
      'group.delete_form',
      'group.content', '
      group.version_history',
      'group_permissions.link.group_permissions_parent',
    ]);
}

/**
 * Group local task titles to change.
 */
function localgov_microsites_group_local_task_title($task_id) {
  switch ($task_id) {

    case 'group.view':
      return t('Dashboard');

    case 'domain_group.group_domain_settings':
      return t('Site settings');

    case 'group.edit_form':
      return t('Site design');

  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function localgov_microsites_group_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Hide menu from node edit forms while user testing is happening as the
  // menu widget doesn't currently work for group menu.
  // See https://github.com/localgovdrupal/localgov_microsites/issues/108
  $form['menu']['#access'] = FALSE;
}

/**
 * Implements hook_module_implements_alter().
 */
function localgov_microsites_group_module_implements_alter(&$implementations, $hook) {

  // Ensure our form alter hook is run after menu_ui.
  if ($hook == 'form_alter' && isset($implementations['localgov_microsites_group'])) {
    $group = $implementations['localgov_microsites_group'];
    unset($implementations['localgov_microsites_group']);
    $implementations['localgov_microsites_group'] = $group;
  }
}

/**
 * Controller callback that redirects group content canonical to content.
 *
 * @see Drupal\localgov_microsites_group\Routing\RouteSubscriber::alterRoutes
 */
function localgov_microsites_group_redirect_group_content(GroupContentInterface $group_content) {
  $entity = $group_content->getEntity();
  return new RedirectResponse($entity->toUrl()->toString());
}
